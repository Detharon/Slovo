package com.dth.util;

import com.dth.entity.Sentence;
import com.dth.entity.WordOccurrence;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * The purpose of the DefaultDocumentProcessor is to parse a text file and
 * generate a list of words, represented by {@code WordOccurrence} objects.
 *
 * It stores the words in an {@code ArrayList}, which is populated by the
 * {@code #processFile()} method and retrieved by the {@code #getWordS()}
 * method.
 */
public class DefaultDocumentProcessor implements DocumentProcessor<Sentence> {

    private final ArrayList<WordOccurrence> words = new ArrayList<>(100);
    private final ArrayList<Sentence> sentences = new ArrayList<>(100);

    /**
     * Reads a text file and processes its content, by fetching words and
     * counting their occurrences.
     *
     */
    public DefaultDocumentProcessor(){};

    /**
     * Returns the list of sentences generated by the {@code #processFile()}
     * method. If the {@code #processFile()} hasn't been run before accessing
     * the words, or there was a problem with the text file, the list will be
     * empty.
     *
     * @return the list of sentences.
     */
    @Override
    public ArrayList<Sentence> getSentences() {
        return sentences;
    }

    @Override
    public void processDocument(File file) {
        try (BufferedReader br = new BufferedReader(
                new InputStreamReader(new FileInputStream(file), "UTF8"))) {

            String line;
            StringBuilder tempSentence = new StringBuilder();
            while ((line = br.readLine()) != null) {
                for (char c : line.toCharArray()) {
                    tempSentence.append(c);
                    if (c == '.') {
                        sentences.add(new Sentence(tempSentence.toString().trim()));
                        tempSentence.setLength(0);
                    }
                }
            }

        } catch (IOException ex) {
            Logger.getLogger(DefaultDocumentProcessor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Processes the text file and populates its internal list of words.
     *
     * <p>
     * The file is read by the BufferedReader object, using the UTF8 encoding.
     * Results are stored in the internal list, and can be accessed from the
     * {@code getWords()} method.
     */
//    @Override
//    public void processFile() {
//        try (BufferedReader br = new BufferedReader(
//                new InputStreamReader(new FileInputStream(file), "UTF8"))) {
//
//            String line;
//            while ((line = br.readLine()) != null) {
//                String[] tempWords = line.split(" ");
//
//                for (Object temp : tempWords) {
//                    temp = processor.processWord(temp);
//                    if (temp.toString().equals("")) {
//                        continue;
//                    }
//
//                    WordOccurrence wordOccurence = new WordOccurrence(temp.toString());
//
//                    Optional<WordOccurrence> sameWord = words.parallelStream()
//                            .filter(w -> w.getWord().equals(wordOccurence.getWord()))
//                            .findAny();
//
//                    if (sameWord.isPresent()) {
//                        sameWord.get().incrementCount();
//                    } else {
//                        words.add(wordOccurence);
//                    }
//                }
//            }
//        } catch (IOException ex) {
//            Logger.getLogger(DefaultDocumentProcessor.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
}
