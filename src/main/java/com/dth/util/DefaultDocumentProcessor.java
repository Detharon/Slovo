package com.dth.util;

import com.dth.entity.WordOccurrence;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * The purpose of the DefaultDocumentProcessor is to parse a text file
 * and generate a list of words, represented by {@code WordOccurrence}
 * objects.
 * 
 * It stores the words in an {@code ArrayList}, which is populated by
 * the {@code #processFile()} method and retrieved by the
 * {@code #getWordS()} method.
 */
public class DefaultDocumentProcessor implements DocumentProcessor {

    private final File file;
    private final WordProcessor processor;
    private final ArrayList<WordOccurrence> words = new ArrayList<>(100);

    /**
     * Reads a text file and processes its content, by fetching words and
     * counting their occurrences.
     *
     * @param file the file to be processed.
     * @param processor the word processor used to transform the word.
     */
    public DefaultDocumentProcessor(File file, WordProcessor processor) {
        this.file = file;
        this.processor = processor;
    }
    
    /**
     * Returns the file provided in the constructor, which should be a
     * text document.
     * 
     * @return  the file being used.
     */
    public File getFile() {
        return file;
    }

    /**
     * Returns the list of words generated by the {@code #processFile()}
     * method. If the {@code #processFile()} hasn't been run before
     * accessing the words, or there was a problem with the text file,
     * the list will be empty.
     * 
     * @return  the list of words.
     */
    @Override
    public ArrayList<WordOccurrence> getWords() {
        return words;
    }

    /**
     * Processes the text file and populates its internal list of words.
     * 
     * <p>The file is read by the BufferedReader object, using the UTF8
     * encoding. Results are stored in the internal list, and can be
     * accessed from the {@code getWords()} method.
     */
    @Override
    public void processFile() {
        try (BufferedReader br = new BufferedReader(
                new InputStreamReader(new FileInputStream(file), "UTF8"))) {

            String line;
            while ((line = br.readLine()) != null) {
                String[] tempWords = line.split(" ");
                
                for (Object temp : tempWords) {
                    temp = processor.processWord(temp);
                    if (temp.toString().equals("")) {
                        continue;
                    }

                    WordOccurrence wordOccurence = new WordOccurrence(temp.toString());

                    Optional<WordOccurrence> sameWord = words.parallelStream()
                            .filter(w -> w.getWord().equals(wordOccurence.getWord()))
                            .findAny();

                    if (sameWord.isPresent()) {
                        sameWord.get().incrementCount();
                    } else {
                        words.add(wordOccurence);
                    }
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(DefaultDocumentProcessor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
