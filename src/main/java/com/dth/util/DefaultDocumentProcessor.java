package com.dth.util;

import com.dth.entity.Sentence;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/**
 * The purpose of the DefaultDocumentProcessor is to parse a text file and
 * generate a list of sentences, represented by {@code Sentence} objects.
 *
 * It stores the words in an {@code ArrayList}, which is populated by the
 * {@code #processDocument()} method and retrieved by the
 * {@code #getSentences()} method.
 */
public class DefaultDocumentProcessor implements DocumentProcessor<Sentence> {

    private final ArrayList<Sentence> sentences = new ArrayList<>(100);

    /**
     * Returns the list of sentences generated by the {@code #processDocument()}
     * method. If the {@code #processDocument()} hasn't been run before
     * accessing the words, or there was a problem with the text file, the list
     * will be empty.
     *
     * @return the list of sentences.
     */
    @Override
    public ArrayList<Sentence> getSentences() {
        return sentences;
    }

    /**
     * Processes the given {@code File} and generates an internal list of
     * sentences, that can be accessed from {@code #getSentences()} method.
     *
     * It is assumed that the file is encoded with UTF-8, and sentences are
     * separated by a dot character.
     *
     * @param file
     * @throws java.io.IOException
     */
    @Override
    public void processDocument(File file) throws IOException {
        try (BufferedReader br = new BufferedReader(
                new InputStreamReader(new FileInputStream(file), "UTF8"))) {

            String line;
            StringBuilder tempSentence = new StringBuilder();
            while ((line = br.readLine()) != null) {
                for (char c : line.toCharArray()) {
                    tempSentence.append(c);
                    if (c == '.') {
                        sentences.add(new Sentence(tempSentence.toString().trim()));
                        tempSentence.setLength(0);
                    }
                }
            }
        }
    }
}
